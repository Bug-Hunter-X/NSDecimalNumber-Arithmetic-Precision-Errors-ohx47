In Objective-C, a common yet subtle error arises when dealing with `NSDecimalNumber`.  Improper usage of its arithmetic methods can lead to unexpected results, especially when performing calculations involving very large or very small numbers.  The issue stems from the fact that `NSDecimalNumber` is designed to prevent floating-point precision errors, but this precision is not unlimited and can be exceeded by certain operations. The problem often manifests as inaccurate calculations, especially when comparing the results against expected values. For instance, adding a very small `NSDecimalNumber` to a very large one might not result in a noticeable change, whereas using floating-point arithmetic would show the change. This can lead to incorrect conditional logic and unexpected program behavior.